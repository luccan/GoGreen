@{
    ViewData["Title"] = "Home Page";
}

<div class="text-left">
    <h1 class="display-4">Introduction</h1>
    <p>
        This full-stack assignment aims to test your proficiency in designing and implementing a software
        solution. The aim is to give you freedom to show your overall skills as a programmer, though there is
        a slight bias towards .NET due to the technology we are using.
        Pay close attention to the fact that – with a few exceptions - many requirements are very loose to
        give you creative freedom. We want to see you hacking, not simply ticking boxes of a todo list. Also,
        even though we appreciate highest standards of excellence, we don’t want to see you spending
        more than 3 or 4 hours on the assignment, so please timebox your effort.
    </p>
    <h1 class="display-4">Assignment</h1>
    <p>
        Go green! Vegetables are awesome, organic ones even more so. Keeping stock of them is not always
        easy, however. A local shop has asked you to quickly help them setup a system for managing their
        inventory. After several cups of (organic!) coffee, they have written you a note with the following
        requirements:
        <ol>
            <li>We must be able to save our inventory to some kind of database.</li>
            <li>We need a backend to manage read-write operation to the database.</li>
            <li>We need an API to expose CRUD operations to network clients.</li>
            <li>We need a client which can read and write to the inventory.</li>
            <li>Finally, we need an easy way to deploy the system.</li>
        </ol>
        After asking them to elaborate a bit, you get the following details for the functionality:
    </p>
    <p><b>Database</b></p>
    <p>
        You are free to use any database you want.
    </p>
    <p><b>Backend</b></p>
    </p>
    Your clients have insisted that the backend be written in C#.
    </p>
    <p><b>API</b></p>
    <p>
        Your API must use the standard HTTP protocol, no authentication is required, and must
        allow users to perform at least the following operations against the backend:
    </p>
    <ul>
        <li>List all veggies – it must be possible to fetch a list of all veggies and their properties.</li>
        <li>ID – must be unique. A veggie may not change its ID during its lifetime.</li>
        <ul>
            <li>Name – name of the veggie (leech, cucumber etc). Not unique.</li>
            <li>Price – price of the vegetable. Not unique.</li>
        </ul>
        <li>List veggie by ID – it must be possible to fetch a single veggie by its ID in the system.</li>
        <li>Update a veggie – it must be possible to change properties – other than the ID – of a veggie.</li>
        <li>Delete a veggie – it must be possible to remove a veggie by providing its ID.</li>
        <li>Add a veggie – it must be possible to add a new veggie with a unique ID to the system.</li>
    </ul>
    <p><b>Client</b></p>
    <p>
        The client only needs to be a very basic, ideally web-based graphic interface for performing
        the operations available in the API.
    </p>

    <p><b>Deployment</b></p>
    <p>
        It must be possible to compile, assemble and run the backend with a single terminal
        command (which may in itself be a script of some sort).
        During the deployment, you may assume that the database is running and accessible using
        whatever method you specify.
    </p>

    <h1 class="display-4">Discussion</h1>
    <p>
        We’d like to discuss your solution from a holistic perspective, with special attention to code quality,
        adherence to best-practices, suitability of technologies chosen, and other relevant factors.
    </p>

    <h1 class="display-4">Questions</h1>
    <p>
        Please do not hesitate to contact us if you have any doubts or questions whatsoever during the
        course of your work.
    </p>
</div>
