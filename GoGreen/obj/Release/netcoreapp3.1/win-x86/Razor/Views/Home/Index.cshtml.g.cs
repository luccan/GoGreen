#pragma checksum "C:\Users\Luccan\source\repos\GoGreen\GoGreen\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9a017625a41c08d4f5ae97d21aa06dc5beda74e6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Luccan\source\repos\GoGreen\GoGreen\Views\_ViewImports.cshtml"
using GoGreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Luccan\source\repos\GoGreen\GoGreen\Views\_ViewImports.cshtml"
using GoGreen.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a017625a41c08d4f5ae97d21aa06dc5beda74e6", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cfd9ce8045106bcd8460e95c2fc6d232c718a422", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Luccan\source\repos\GoGreen\GoGreen\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-left"">
    <h1 class=""display-4"">Introduction</h1>
    <p>
        This full-stack assignment aims to test your proficiency in designing and implementing a software
        solution. The aim is to give you freedom to show your overall skills as a programmer, though there is
        a slight bias towards .NET due to the technology we are using.
        Pay close attention to the fact that – with a few exceptions - many requirements are very loose to
        give you creative freedom. We want to see you hacking, not simply ticking boxes of a todo list. Also,
        even though we appreciate highest standards of excellence, we don’t want to see you spending
        more than 3 or 4 hours on the assignment, so please timebox your effort.
    </p>
    <h1 class=""display-4"">Assignment</h1>
    <p>
        Go green! Vegetables are awesome, organic ones even more so. Keeping stock of them is not always
        easy, however. A local shop has asked you to quickly help them setup a sys");
            WriteLiteral(@"tem for managing their
        inventory. After several cups of (organic!) coffee, they have written you a note with the following
        requirements:
        <ol>
            <li>We must be able to save our inventory to some kind of database.</li>
            <li>We need a backend to manage read-write operation to the database.</li>
            <li>We need an API to expose CRUD operations to network clients.</li>
            <li>We need a client which can read and write to the inventory.</li>
            <li>Finally, we need an easy way to deploy the system.</li>
        </ol>
        After asking them to elaborate a bit, you get the following details for the functionality:
    </p>
    <p><b>Database</b></p>
    <p>
        You are free to use any database you want.
    </p>
    <p><b>Backend</b></p>
    </p>
    Your clients have insisted that the backend be written in C#.
    </p>
    <p><b>API</b></p>
    <p>
        Your API must use the standard HTTP protocol, no authentication ");
            WriteLiteral(@"is required, and must
        allow users to perform at least the following operations against the backend:
    </p>
    <ul>
        <li>List all veggies – it must be possible to fetch a list of all veggies and their properties.</li>
        <li>ID – must be unique. A veggie may not change its ID during its lifetime.</li>
        <ul>
            <li>Name – name of the veggie (leech, cucumber etc). Not unique.</li>
            <li>Price – price of the vegetable. Not unique.</li>
        </ul>
        <li>List veggie by ID – it must be possible to fetch a single veggie by its ID in the system.</li>
        <li>Update a veggie – it must be possible to change properties – other than the ID – of a veggie.</li>
        <li>Delete a veggie – it must be possible to remove a veggie by providing its ID.</li>
        <li>Add a veggie – it must be possible to add a new veggie with a unique ID to the system.</li>
    </ul>
    <p><b>Client</b></p>
    <p>
        The client only needs to be a very basic");
            WriteLiteral(@", ideally web-based graphic interface for performing
        the operations available in the API.
    </p>

    <p><b>Deployment</b></p>
    <p>
        It must be possible to compile, assemble and run the backend with a single terminal
        command (which may in itself be a script of some sort).
        During the deployment, you may assume that the database is running and accessible using
        whatever method you specify.
    </p>

    <h1 class=""display-4"">Discussion</h1>
    <p>
        We’d like to discuss your solution from a holistic perspective, with special attention to code quality,
        adherence to best-practices, suitability of technologies chosen, and other relevant factors.
    </p>

    <h1 class=""display-4"">Questions</h1>
    <p>
        Please do not hesitate to contact us if you have any doubts or questions whatsoever during the
        course of your work.
    </p>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
